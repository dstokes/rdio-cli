#! /usr/bin/env node

require('coffee-script');

var path   = require('path')
  , rdio   = require(path.join(__dirname, '..', 'lib/main.coffee'))
  , repl   = require(path.join(__dirname, '..', 'lib/repl.coffee'))
  , args   = process.argv.splice(2)
  , action = (args.shift() || 'help');
  ;

function exec() {
  var args = Array.prototype.slice.call(arguments)
    , action = args.shift();
  if(rdio[action]) rdio[action].apply(rdio, args[0]);
}

function getTrackBanner(data) {
  var longest = Math.max(data.artist.length, data.track.length) + 9
    , divider = [];

  for(var i = 0; i < longest; i++) divider.push('_');

  return " Artist: " + data.artist + "\n" +
         " Track: " + data.track + "\n" +
         " Album: " + data.album + "\n" +
         " " + divider.join('') + "\n\n "
}

// handle single command
if(action && action !== 'help') {
  return exec(action, args);
}

// otherwise launch repl
repl.start();
rdio.on('change', function(model, options) {
  json = model.toJSON()
  repl.clear();
  repl.write(getTrackBanner(model.toJSON()));
});

repl
  .on('keypress', function(key) {
    exec(key, function() {
      if(key !== 'p') { repl.clear(); }
    });
  })
  .on('line', function(line) {
    var len = line.length
      , args = line.substr(0, len-1).split(' ');
    exec(args.shift(), args);
  });
